/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define MAC 0
#define MAC_BINDINGS 1
#define WINDOWS 2
#define WINDOWS_BINDINGS 3
#define LOWER   4
#define RAISE   5
#define ADJUST  6

#define LT0  5  // left-top row
#define LT1  4
#define LT2  3
#define LT3  2
#define LT4  1
#define LT5  0

#define RT0  6  // right-top row
#define RT1  7
#define RT2  8
#define RT3  9
#define RT4 10
#define RT5 11

#define LM0 17  // left-middle row
#define LM1 16
#define LM2 15
#define LM3 14
#define LM4 13
#define LM5 12

#define RM0 18  // right-middle row
#define RM1 19
#define RM2 20
#define RM3 21
#define RM4 22
#define RM5 23

#define LB0 29  // left-bottom row
#define LB1 28
#define LB2 27
#define LB3 26
#define LB4 25
#define LB5 24

#define RB0 30  // right-bottom row
#define RB1 31
#define RB2 32
#define RB3 33
#define RB4 34
#define RB5 35

#define LH0 38  // left thumb keys
#define LH1 37
#define LH2 36

#define RH0 39  // right thumb keys
#define RH1 40
#define RH2 41


/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                        tri_layer {
                        if-layers = <LOWER RAISE>;
                        then-layer = <ADJUST>;
                };
        };

        macros {
                ZMK_MACRO(switch_to_mac, bindings= <&bt BT_SEL 0 &to MAC>;)
                ZMK_MACRO(switch_to_ipad, bindings= <&bt BT_SEL 2 &to MAC>;)
                ZMK_MACRO(switch_to_windows, bindings= <&bt BT_SEL 1 &to WINDOWS>;)

                win_app_sw: win_app_sw {
                        label = "WINDOWS_APP_SWITCHER";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LALT>
                                , <&macro_tap &kp TAB>
                                , <&macro_press &mo LOWER>
                                , <&macro_pause_for_release>
                                , <&macro_release &mo LOWER>
                                , <&macro_release &kp LALT>
                                ;
                };     

                mac_app_sw: mac_app_sw {
                        label = "MAC_APP_SWITCHER";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp TAB>
                                , <&macro_press &mo LOWER>
                                , <&macro_pause_for_release>
                                , <&macro_release &mo LOWER>
                                , <&macro_release &kp LGUI>
                                ;
                };  
        };

        combos {
                compatible = "zmk,combos";
                combo_spotlight {         
                        timeout-ms = <15>;
                        key-positions = <LH0 RH0>;
                        bindings = <&kp LG(SPACE)>;
                        layers = <MAC>;
                };

                combo_spotlight_windows {         
                        timeout-ms = <15>;
                        key-positions = <LH0 RH0>;
                        bindings = <&kp LA(SPACE)>;
                        layers = <WINDOWS>;
                };

                combo_app_switcher_windows {         
                        timeout-ms = <15>;
                        key-positions = <LM4 LM3 LM2 LM1>;
                        bindings = <&win_app_sw>;
                        layers = <WINDOWS>;
                };

                combo_copy_windows {         
                        timeout-ms = <15>;
                        key-positions = <LB3 LB2>;
                        bindings = <&kp LC(C)>;
                        layers = <WINDOWS>;
                };
                combo_paste_windows {         
                        timeout-ms = <15>;
                        key-positions = <LB2 LB1>;
                        bindings = <&kp LC(V)>;
                        layers = <WINDOWS>;
                };
                combo_cut_windows {         
                        timeout-ms = <15>;
                        key-positions = <LB3 LB1>;
                        bindings = <&kp LC(X)>;
                        layers = <WINDOWS>;
                };
                combo_undo_windows {         
                        timeout-ms = <15>;
                        key-positions = <LB4 LB3>;
                        bindings = <&kp LC(Z)>;
                        layers = <WINDOWS>;
                };
                combo_select_windows {         
                        timeout-ms = <15>;
                        key-positions = <LM4 LM1>;
                        bindings = <&kp LC(A)>;
                        layers = <WINDOWS>;
                };
                /*
                combo_save_windows {         
                        timeout-ms = <15>;
                        key-positions = <LM4 LM3>;
                        bindings = <&kp LC(S)>;
                        layers = <WINDOWS>;
                };*/
                combo_find_windows {         
                        timeout-ms = <15>;
                        key-positions = <LM2 LM1>;
                        bindings = <&kp LC(F)>;
                        layers = <WINDOWS>;
                };
                combo_close_window_windows {         
                        timeout-ms = <15>;
                        key-positions = <LT3 LT1>;
                        bindings = <&kp LC(W)>;
                        layers = <WINDOWS>;
                };
                
                combo_app_switcher_mac {         
                        timeout-ms = <15>;
                        key-positions = <LM4 LM3 LM2 LM1>;
                        bindings = <&mac_app_sw>;
                        layers = <MAC>;
                };
                
                combo_copy_mac {         
                        timeout-ms = <15>;
                        key-positions = <LB3 LB2>;
                        bindings = <&kp LG(C)>;
                        layers = <MAC>;
                };
                combo_paste_mac {         
                        timeout-ms = <15>;
                        key-positions = <LB2 LB1>;
                        bindings = <&kp LG(V)>;
                        layers = <MAC>;
                };
                combo_cut_mac {         
                        timeout-ms = <15>;
                        key-positions = <LB3 LB1>;
                        bindings = <&kp LG(X)>;
                        layers = <MAC>;
                };
                combo_undo_mac {         
                        timeout-ms = <15>;
                        key-positions = <LB4 LB3>;
                        bindings = <&kp LG(Z)>;
                        layers = <MAC>;
                };
                combo_select_mac {         
                        timeout-ms = <15>;
                        key-positions = <LM4 LM1>;
                        bindings = <&kp LG(A)>;
                        layers = <MAC>;
                };/*
                combo_save_mac {         
                        timeout-ms = <15>;
                        key-positions = <LM4 LM3>;
                        bindings = <&kp LG(S)>;
                        layers = <MAC>;
                };*/
                combo_find_mac {         
                        timeout-ms = <15>;
                        key-positions = <LM2 LM1>;
                        bindings = <&kp LG(F)>;
                        layers = <MAC>;
                };
                combo_close_window_mac {
                        timeout-ms = <15>;
                        key-positions = <LT3 LT1>;
                        bindings = <&kp LG(W)>;
                        layers = <MAC>;
                };
        };                      

        keymap {
                compatible = "zmk,keymap";

                mac_layer {
                        bindings = <
   &kp TAB          &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &mt LCTRL ESC    &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT        &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp DEL
                     &kp LGUI &mo LOWER &kp SPACE   &mt LSHIFT RET &mo RAISE &kp RALT
                        >;      
                };
                
                mac_bindings_layers {
                        bindings = <
   &trans       &trans          &trans              &trans       &trans       &trans         &kp LG(Y) &trans &trans &trans &trans &trans
   &trans       &kp LG(A)       &kp LG(S)           &kp LG(D)    &kp LG(F)    &trans         &trans    &trans &trans &trans &trans &trans
   &trans       &kp LG(Z)       &kp LG(X)           &kp LG(C)    &kp LG(V)    &trans         &trans    &trans &trans &trans &trans &trans
                                                    &trans       &trans       &trans         &trans    &trans &trans
                        >;
                };

                windows_layer {
                        bindings = <
   &kp TAB         &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &mt LCTRL ESC   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT       &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp DEL
                    &kp LALT &mo LOWER &kp SPACE   &mt LSHIFT RET &mo RAISE &kp LGUI

                        >;
                };

                windows_bindings_layers {
                        bindings = <
   &trans        &trans          &trans          &trans       &trans       &trans         &kp LC(Y) &trans &trans &trans &trans &trans
   &trans        &kp LC(A)       &kp LC(S)       &kp LC(D)    &kp LC(F)    &trans         &trans    &trans &trans &trans &trans &trans
   &trans        &kp LC(Z)       &kp LC(X)       &kp LC(C)    &kp LC(V)    &trans         &trans    &trans &trans &trans &trans &trans
                          &trans       &trans       &trans                         &trans    &trans &trans
                        >;
                };
        
                lower_layer {
                        bindings = <
   &trans  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &trans  &kp F1 &kp F2 &kp F3 &kp F4 &kp F5   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &trans  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10  &trans   &trans   &trans &trans    &trans &trans
                         &trans &trans &trans   &trans   &trans   &trans
                        >;
                };

                raise_layer {
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &trans    &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                             &trans   &trans   &trans      &trans    &trans    &trans
                        >;
                };
       
                adjust_layer {
                        bindings = <
   &trans       &trans          &trans              &trans          &trans       &trans         &trans &trans &trans &trans &trans &trans
   &bt BT_CLR   &switch_to_mac  &switch_to_windows  &switch_to_ipad &bt BT_SEL 3 &bt BT_SEL 4   &trans &trans &trans &trans &trans &trans
   &bootloader  &trans          &trans              &trans          &trans       &trans         &trans &trans &trans &trans &trans &bootloader
                                                    &trans          &trans       &trans         &trans &trans &trans
                        >;
                };       
        }; 
};
